name: Build and Bundle Jfrog Helm chart
permissions:
  contents: read
  pull-requests: write

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      chart_version: 
        description: 'Build number to use for the build metadata'
        required: true
        default: '0.0.0'
env:
    JF_PROJECT: ecosystem
    JF_REPO: ecosystem-helm-dev-local
    CHART_VERSION: ""
    CHART_NAME: 'aerospike-vector-search'
jobs:
  build-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v3

      - name: Determine Version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            CHART_VERSION=${{ github.event.inputs.chart_version }}
          elif [[ "${{ github.event_name}}" == "push" ]]; then
            TAG=${GITHUB_REF#refs/tags/} 
              # Remove "v" prefix to get the version
            CHART_VERSION=${TAG#v}
          else
            echo "Unable to determine version"
            exit 1
          fi
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_ENV

      - name: setup GPG
        uses: aerospike/shared-workflows/devops/setup-gpg@main
        with:
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}
          gpg-public-key: ${{ secrets.GPG_PUBLIC_KEY }}
          gpg-key-pass: ${{ secrets.GPG_PASS }}
          gpg-key-name: "aerospike-inc"
          
      - name: setup jfrog
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://aerospike.jfrog.io
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_PROJECT: ${{ env.JF_PROJECT }}

      - name: Set Helm Chart Version
        uses: mikefarah/yq@4839dbbf80445070a31c7a9c1055da527db2d5ee
        with: 
            cmd: yq e -i '.version = "${{ env.CHART_VERSION }}"' charts/$CHART_NAME/Chart.yaml
      - name: "Sign and publish build to JFrog"
        env:
            GPG_TTY: no-tty
            GPG_PASSPHRASE: ${{ secrets.GPG_PASS }}
        run: |
            cd charts

            gpg --export --no-tty  --passphrase "$GPG_PASSPHRASE" > ~/.gnupg/pubring.gpg
            gpg --export-secret-keys --no-tty  --passphrase "$GPG_PASSPHRASE">~/.gnupg/secring.gpg
            echo $GPG_PASSPHRASE > passphrase.txt
            helm --sign --key='aerospike-inc' --keyring='/home/runner/.gnupg/secring.gpg' --passphrase-file passphrase.txt  package $CHART_NAME
            find .
            jf rt u "${{env.CHART_NAME}}-${{env.CHART_VERSION}}.tgz*" "${{env.JF_REPO}}/${{env.CHART_NAME}}/${{env.CHART_VERSION}}/" \
            --build-name="${{env.CHART_NAME}}-helm" --build-number="${{env.CHART_VERSION}}" --project="${{env.JF_PROJECT}}"
            jf rt build-collect-env "${{env.CHART_NAME}}-helm" "${{env.CHART_VERSION}}"
            jf rt build-add-git "${{env.CHART_NAME}}-helm" "${{env.CHART_VERSION}}"
            jf rt build-publish "${{env.CHART_NAME}}-helm" "${{env.CHART_VERSION}}" --project="${{env.JF_PROJECT}}"                  
      - name: Create release bundle

        run: |
            echo '{
              
              "name": "${{ env.CHART_NAME }}-helm",
              "version": "${{ env.CHART_VERSION }}",
              "files": [
                {
                  "project": "${{ env.JF_PROJECT }}",
                  "build": "${{ env.CHART_NAME }}-helm/${{ env.CHART_VERSION }}"
                }
              ]
            }' > release-bundle-spec.json
            cat release-bundle-spec.json
            jf release-bundle-create "${{ env.CHART_NAME }}-helm" "${{ env.CHART_VERSION }}" \
              --spec release-bundle-spec.json --project="${{ env.JF_PROJECT }}" --signing-key="aerospike"

  build-init-container:
    needs:
      - build-chart
    runs-on: ubuntu-latest
    steps: 
      - name: 'Git checkout'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: setup jfrog
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://aerospike.jfrog.io
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          JF_PROJECT: ${{ env.JF_PROJECT }}

      - name: Login to Artifact Aerospike Docker Registry
        run: |
            jf docker login artifact.aerospike.io --username ${{ vars.JF_USERNAME }} --password ${{ secrets.JF_ACCESS_TOKEN }}
        env:
            JFROG_CLI_OFFER_CONFIG: 'false'
      - name: Configure JFrog CLI
        run: |
          jf c add \
            --url https://artifact.aerospike.io/ \
            --user ${{ vars.JF_USERNAME }} \
            --access-token ${{ secrets.JF_ACCESS_TOKEN }} \
            artifact

          jf c use artifact
        env:
          JFROG_CLI_OFFER_CONFIG: 'false'
    
# Init container uses chart's version
      - name: Build and Push Docker Image
        run: |
          jf docker buildx bake \
            --set avs-init-container.tags=artifact.aerospike.io/${{ env.JF_PROJECT }}-container-dev-local/avs-init-container:${{ env.CHART_VERSION }} \
            --file avs-init-container/bake.hcl \
            --push \
            --metadata-file=build-metadata
        env:
          DOCKER_BUILDKIT: '1'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
  
      - name: Extract Image Name and Digest
        run: |
            jq -r '.[] | {digest: .["containerimage.digest"], names: .["image.name"] | split(",")} | "(.digest)"' build-metadata > sha
            echo artifact.aerospike.io/${{ env.JF_PROJECT }}-container-dev-local/avs-init-container:${{ env.CHART_VERSION }}@$(cat sha) > meta-info
            echo artifact.aerospike.io/${{ env.JF_PROJECT }}-container-dev-local/avs-init-container:${{ env.CHART_VERSION }}@$(cat sha) > meta-info-latest
      - name: Create Docker Build Info
        run: |
          jf rt build-docker-create \
            --build-name "avs-init-container" \
            --build-number "${{ env.CHART_VERSION }}" \
            --image-file ./meta-info \
            --project ${{env.JF_PROJECT}} \
            ecosystem-container-dev-local
          
      - name: Publish Build Info
        run: |
          export JFROG_CLI_LOG_LEVEL=DEBUG 
          jf rt build-collect-env --project ecosystem "avs-init-container" "${{ env.CHART_VERSION }}"  
          jf rt build-add-git --project ecosystem "avs-init-container" "${{ env.CHART_VERSION }}" 

          jf rt build-publish \
            --detailed-summary \
            --project ecosystem \
            "avs-init-container" "env.CHART_VERSION"
        